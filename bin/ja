#!/usr/bin/env bash

VERSION="1.0.0"
CONFIG_FOLDER="$HOME/.ja/$VERSION/"
CONFIG_FILE="$CONFIG_FOLDER/jira-alias.ini"

# Colors and formatting
# --------------------------------------------------------------------

grey() {
  printf "\e[0;90m%s\e[0m" "$1"
}

green() {
  printf "\e[0;32m%s\e[0m" "$1"
}

red() {
  printf "\e[1;31m%s\e[0m" "$1"
}

yellow() {
  printf "\e[0;33m%s\e[0m" "$1"
}

blue() {
  printf "\e[0;36m%s\e[0m" "$1"
}

# Config
# --------------------------------------------------------------------

read_config() {
  if [ -f "$CONFIG_FILE" ]; then
    while IFS='=' read -r key value; do
      if [[ ! "$key" =~ ^\s*# && -n "$key" ]]; then
        value=$(echo "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        eval "$key=\"$value\""
      fi
    done <"$CONFIG_FILE"
  else
    cat <<-EOF

		$(green "ja") » simple jira aliases $(grey "by Callum Silcock")

		Looks like there's no config file, so lets create you one

		$(grey "Creating file: $CONFIG_FILE")
EOF
    mkdir -p "$CONFIG_FOLDER"
    touch "$CONFIG_FILE"
    write_config
    exit 1
  fi
}

write_config() {
  echo $(grey "What is your companies service url?\n")
  while [[ -z "$jira_url" ]]; do
    read -ep "$(grey "Jira URL: ")" jira_url
  done
  echo $(grey "Next up we're going to generate a Personal Access Token")
  echo $(grey "I'll open the url to do this now")
  sleep 2
  open "$jira_url/secure/ViewProfile.jspa?selectedTab=com.atlassian.pats.pats-plugin:jira-user-personal-access-tokens"
  echo $(grey "Now copy/paste the generated token to the console")
  while [[ -z "$access_token" ]]; do
    read -ep "$(grey "Personal Access Token: ")" access_token
  done
  echo $(grey "What is the main project key you would like to create tickets within")
  while [[ -z "$project_key" ]]; do
    read -ep "$(grey "Project Key: ")" project_key
  done
  echo $(grey "What is the main epic you would like to create tickets within")
  while [[ -z "$epic_key" ]]; do
    read -ep "$(grey "Epic Ticket Number: ")" epic_key
  done

  echo $(green "Writing config...")

  exec 3>"$CONFIG_FILE"
  echo "# This is a generated file from Jira Aliases" >&3
  echo "JIRA_URL=$jira_url" >&3
  echo "PROJECT_KEY=$project_key" >&3
  echo "ACCESS_TOKEN=$access_token" >&3
  echo "EPIC_KEY=$epic_key" >&3
  exec 3>&-
}

create() {
  echo $(blue "Let's create a ticket...")
  read -n 1 -ep "$(grey "Ticket type: (t)ask,  (s)tory, (b)ug - ")" ticket_type
  case $ticket_type in
  "t" | "T")
    ticket_type="Task"
    ;;
  "s" | "S")
    ticket_type="Story"
    ;;
  "b" | "B")
    ticket_type="Bug"
    ;;
  *)
    echo "invalid ticket type chosen, please chose one of: (t)ask,  (s)tory, (b)ug"
    exit 1
    ;;
  esac

  while [[ -z "$ticket_title" ]]; do
    read -ep "$(grey "Title: ")" ticket_title
  done
  while [[ -z "$ticket_description" ]]; do
    read -ep "$(grey "Description: ")" ticket_description
  done
  echo $(green "Creating ticket...")
  echo $(grey "  [$ticket_type]----------------------------------")
  echo $(grey "  $ticket_title")
  echo $(grey "  $ticket_description")

  # Create the JSON payload for the Jira ticket
  JSON_DATA=$(
    cat <<EOF
{
  "fields": {
    "project": {
      "key": "$PROJECT_KEY"
    },
    "summary": "$ticket_title",
    "description": "$ticket_description",
    "issuetype": {
      "name": "$ticket_type"
    },
    "customfield_10101": "$EPIC_KEY"
  }
}
EOF
  )

  # Send the API request to create the ticket
  curl -D- -X POST \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    --data "$JSON_DATA" "$JIRA_URL/rest/api/2/issue"

}

open() {
  echo "$JIRA_URL"
}

display_help() {
  cat <<-EOF

		$(green "ja") » simple jira aliases $(grey "by Callum Silcock")

		$(green "ja") $(yellow "c")            $(grey "|") create ticket
		$(green "ja") $(yellow "o")            $(grey "|") open ticket

	EOF
  exit 0
}

read_config

# Interface
# --------------------------------------------------------------------

if test $# -eq 0; then
  display_help
else
  while test $# -ne 0; do
    case $1 in
    c | create) create ;;
    o | open) open ;;
    -h | --help | help) display_help ;;
    *)
      unknown_command "$@"
      exit 1
      ;;
    esac
    shift
  done
fi
