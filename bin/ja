#!/usr/bin/env bash

CONFIG_FOLDER="$HOME/.ja/"
CONFIG_FILE="$CONFIG_FOLDER/jira-alias.ini"
VERSION_URL="https://raw.githubusercontent.com/csi-lk/jira-aliases/main/.release-please-manifest.json"

# Colors and formatting
# --------------------------------------------------------------------

grey() {
  printf "\e[0;90m%s\e[0m" "$1"
}

green() {
  printf "\e[0;32m%s\e[0m" "$1"
}

red() {
  printf "\e[1;31m%s\e[0m" "$1"
}

yellow() {
  printf "\e[0;33m%s\e[0m" "$1"
}

blue() {
  printf "\e[0;36m%s\e[0m" "$1"
}

# Config
# --------------------------------------------------------------------

read_config() {
  if [ -f "$CONFIG_FILE" ]; then
    while IFS='=' read -r key value; do
      if [[ ! "$key" =~ ^\s*# && -n "$key" ]]; then
        value=$(echo "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        eval "$key=\"$value\""
      fi
    done <"$CONFIG_FILE"
  else
    cat <<-EOF

		$(green "ja") » simple jira aliases $(grey "by Callum Silcock")

		Looks like there's no config file, so lets create you one

		$(grey "Creating file: $CONFIG_FILE")
EOF
    mkdir -p "$CONFIG_FOLDER"
    touch "$CONFIG_FILE"
    write_config
    exit 1
  fi
}

write_config() {
  echo $(grey "What is your companies service url?\n")
  while [[ -z "$jira_url" ]]; do
    read -ep "$(grey "Jira URL: ")" jira_url
  done
  echo $(grey "Next up we're going to generate a Personal Access Token")
  echo $(grey "I'll open the url to do this now")
  sleep 2
  open "$jira_url/secure/ViewProfile.jspa?selectedTab=com.atlassian.pats.pats-plugin:jira-user-personal-access-tokens"
  echo $(grey "Now copy/paste the generated token to the console")
  while [[ -z "$access_token" ]]; do
    read -ep "$(grey "Personal Access Token: ")" access_token
  done
  echo $(grey "What is the main project key you would like to create tickets within")
  while [[ -z "$project_key" ]]; do
    read -ep "$(grey "Project Key: ")" project_key
  done
  echo $(grey "What is the main epic you would like to create tickets within")
  while [[ -z "$epic_key" ]]; do
    read -ep "$(grey "Epic Ticket Number: ")" epic_key
  done

  echo $(green "Writing config...")

  exec 3>"$CONFIG_FILE"
  echo "# This is a generated file from Jira Aliases" >&3
  echo "JIRA_URL=$jira_url" >&3
  echo "PROJECT_KEY=$project_key" >&3
  echo "ACCESS_TOKEN=$access_token" >&3
  echo "EPIC_KEY=$epic_key" >&3
  echo "FOCUSED_TICKET=" >&3
  echo "PHONE_HOME_HOURS=24" >&3
  echo "CURRENT_VERSION=$(get_version_from_remote_manifest)" >&3
  echo "LAST_PHONE_HOME=$(date +%s)" >&3
  exec 3>&-
}

update_config_value() {
  local key="$1"
  local new_value="$2"

  mapfile -t config_lines <"$CONFIG_FILE"

  for i in "${!config_lines[@]}"; do
    line="${config_lines[$i]}"
    if [[ $line == $key=* ]]; then
      config_lines[$i]="$key=$new_value"
      break
    fi
  done

  printf "%s\n" "${config_lines[@]}" >"$CONFIG_FILE"
}

# Functions
# --------------------------------------------------------------------

create() {
  echo $(blue "Let's create a ticket...")
  read -n 1 -ep "$(grey "Ticket type: (t)ask,  (s)tory, (b)ug - ")" ticket_type
  case $ticket_type in
  "t" | "T")
    ticket_type="Task"
    ;;
  "s" | "S")
    ticket_type="Story"
    ;;
  "b" | "B")
    ticket_type="Bug"
    ;;
  *)
    echo "invalid ticket type chosen, please chose one of: (t)ask,  (s)tory, (b)ug"
    exit 1
    ;;
  esac

  while [[ -z "$ticket_title" ]]; do
    read -ep "$(grey "Title: ")" ticket_title
  done
  while [[ -z "$ticket_description" ]]; do
    read -ep "$(grey "Description: ")" ticket_description
  done
  echo $(green "Creating ticket...")
  echo $(grey "  [$ticket_type]----------------------------------")
  echo $(grey "  $ticket_title")
  echo $(grey "  $ticket_description")

  # Create the JSON payload for the Jira ticket
  JSON_DATA=$(
    cat <<EOF
{
  "fields": {
    "project": {
      "key": "$PROJECT_KEY"
    },
    "summary": "$ticket_title",
    "description": "$ticket_description",
    "issuetype": {
      "name": "$ticket_type"
    },
    "customfield_10101": "$EPIC_KEY"
  }
}
EOF
  )

  # Send the API request to create the ticket
  response=$(curl -s -X POST \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    --data "$JSON_DATA" "$JIRA_URL/rest/api/2/issue")

  echo "$response"

  created_ticket=$(echo "$response" | grep -o "\"key\": *\"[^\"]*\"" | awk -F "\"" '{print $4}')

  echo $(green "Created Ticket: $created_ticket")

  update_config_value "FOCUSED_TICKET" "$created_ticket"

}

open_ticket() {
  focused_ticket=$(get_focused_ticket "$1" "o")
  jira_url="$JIRA_URL/browse/$focused_ticket"
  echo $(grey "Opening: $jira_url")
  open "$jira_url"
}

# 1: Ticket Key (eg. TICKET-123)
# 2: Transition ID (eg. 71)
# 3: Transition string (eg. IN PROGRESS)
transition_ticket() {
  focused_ticket=$(get_focused_ticket "$1" "mp")

  # TODO: Transition IDs should be configurable

  JSON_DATA=$(
    cat <<EOF
{
  "transition": {
    "id": "$2"
  }
}
EOF
  )

  # Send the API request to move the ticket
  response=$(curl -s -X POST \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    --data "$JSON_DATA" "$JIRA_URL/rest/api/2/issue/$focused_ticket/transitions")

  echo $(green "Moved $focused_ticket -> $3")
}

move_todo() {
  TRANSITION_TODO="21"
  transition_ticket "$1" "$TRANSITION_TODO" "TODO"
}

move_in_progress() {
  TRANSITION_IN_PROGRESS="71"
  transition_ticket "$1" "$TRANSITION_IN_PROGRESS" "IN PROGRESS"
}

move_review() {
  TRANSITION_IN_PROGRESS="91"
  transition_ticket "$1" "$TRANSITION_IN_PROGRESS" "REVIEW"
}

move_done() {
  TRANSITION_DONE="141"
  transition_ticket "$1" "$TRANSITION_DONE" "DONE"
}

focus_on_ticket() {
  update_config_value "FOCUSED_TICKET" "$1"
  echo $(green "Focusing on ticket: $1")
}

copy_ticket_to_clipboard() {
  get_focused_ticket | pbcopy
}

combo() {
  # Combo commands, eg. ja c mp o for create ticket, move to in progress and open in browser
  is_first=true
  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [ "$is_first" = false ]; then
      command="ja $arg"
      echo $(grey "|> $command")
      eval "$command"
      if [[ $? -ne 0 ]]; then
        echo $(red "C-C-C-Combo BREAKER: Above command failed.")
        exit 1
      fi
    else
      echo $(blue "C-C-C-Combo time:")
      is_first=false
    fi
    shift
  done
}

# Utility functions
# --------------------------------------------------------------------

version() {
  echo "current version: $CURRENT_VERSION, remote version: $(green "$(get_version_from_remote_manifest)")"
}

err_missing_param() {
  cat <<-EOF

		$(red "Missing parameter: $1")
			$(green "ja") $(yellow "$2") $(red "<$1>")

	EOF
  exit 1
}

get_focused_ticket() {
  the_ticket="$FOCUSED_TICKET"
  if [[ ! -z "$1" ]]; then
    the_ticket="$1"
  fi
  if [[ -z "$the_ticket" ]]; then
    err_missing_param "jira ticket not passed" "$2"
  fi
  echo "$the_ticket"
}

get_version_from_remote_manifest() {
  local json_response version
  json_response=$(curl -s "$VERSION_URL")
  version=$(echo "$json_response" | grep -o "\".\": *\"[^\"]*\"" | cut -d'"' -f4)
  echo "$version"
}

get_latest_release() {
  local current_time phone_home_seconds version
  current_time=$(date +%s)
  phone_home_seconds=(PHONE_HOME_HOURS * 24 * 24)
  # Check if 24 hours have passed since the last check
  if ((current_time - LAST_PHONE_HOME >= phone_home_seconds)); then
    update_config_value "LAST_PHONE_HOME" "$current_time"
    version=$(get_version_from_remote_manifest)
    if [ -n "$version" ]; then
      if [ "$version" != "$CURRENT_VERSION" ]; then
        echo $(grey "------------------------------------------------------------------------------------------")
        echo "$(green "ja") » $(green "there is an update available for download!")"
        echo "current version: $CURRENT_VERSION, new version: $(green "$version")"
        echo "To auto update run: "
        echo $(grey "  curl -fsSL https://raw.githubusercontent.com/csi-lk/jira-aliases/master/install | bash")
        echo $(grey "------------------------------------------------------------------------------------------")
      fi
    else
      echo $(red "Couldn't find latest version information, you may need to manually update")
      echo $(grey "> https://github.com/csi-lk/jira-aliases")
    fi
  fi
}

display_help() {
  cat <<-EOF

		$(green "ja") » simple jira aliases $(grey "by Callum Silcock")

		$(green "ja") $(yellow "c")               $(grey "|") create ticket
		$(green "ja") $(yellow "o  <?ticket>")    $(grey "|") open ticket in browser
		$(green "ja") $(yellow "mt <?ticket>")    $(grey "|") move ticket to 'todo'
		$(green "ja") $(yellow "mp <?ticket>")    $(grey "|") move ticket to 'in progress'
		$(green "ja") $(yellow "mr <?ticket>")    $(grey "|") move ticket to 'review'
		$(green "ja") $(yellow "md <?ticket>")    $(grey "|") move ticket to 'done'
		$(green "ja") $(yellow "cp")              $(grey "|") copy ticket to clipboard
		$(green "ja") $(yellow "f  <?ticket>")    $(grey "|") focus on ticket
		$(green "ja") $(yellow "z  <?commands>")  $(grey "|") combine multiple single commands together

	EOF
  exit 0
}

# Run Every Time
# --------------------------------------------------------------------

read_config
get_latest_release

# Interface
# --------------------------------------------------------------------

if test $# -eq 0; then
  display_help
else
  while test $# -ne 0; do
    case $1 in
    c | create) create ;;
    o | open)
      open_ticket "$2"
      exit
      ;;
    mt | move_todo | todo)
      move_todo "$2"
      exit
      ;;
    mp | move_in_progress | progress | prog)
      move_in_progress "$2"
      exit
      ;;
    mr | move_review | review)
      move_review "$2"
      exit
      ;;
    md | move_done | done)
      move_done "$2"
      exit
      ;;
    cp | copy | copy_ticket | copy_to_clipboard)
      copy_ticket_to_clipboard "$2"
      exit
      ;;
    f | focus | focus_ticket)
      focus_on_ticket "$2"
      exit
      ;;
    z | combo)
      combo "$@"
      exit
      ;;
    -v | v | -V | version) version ;;
    -h | --help | help) display_help ;;
    *)
      unknown_command "$@"
      exit 1
      ;;
    esac
    shift
  done
fi
