#!/usr/bin/env bash

BASE_DIRECTORY="/usr/local/jira-aliases"

# Include relevant files
# --------------------------------------------------------------------
source "$BASE_DIRECTORY/src/util/colors"  # Colors
source "$BASE_DIRECTORY/src/util/config"  # Load config
source "$BASE_DIRECTORY/src/util/version" # Handle versions

# Functions
# --------------------------------------------------------------------

create() {
  echo $(blue "Let's create a ticket...")
  read -n 1 -ep "$(grey "Ticket type: (t)ask,  (s)tory, (b)ug - ")" ticket_type
  case $ticket_type in
  "t" | "T")
    ticket_type="Task"
    ;;
  "s" | "S")
    ticket_type="Story"
    ;;
  "b" | "B")
    ticket_type="Bug"
    ;;
  *)
    echo "invalid ticket type chosen, please chose one of: (t)ask,  (s)tory, (b)ug"
    exit 1
    ;;
  esac

  while [[ -z "$ticket_title" ]]; do
    read -ep "$(grey "Title: ")" ticket_title
  done
  while [[ -z "$ticket_description" ]]; do
    read -ep "$(grey "Description: ")" ticket_description
  done
  echo $(green "Creating ticket...")

  # Create the JSON payload for the Jira ticket
  JSON_DATA=$(
    cat <<EOF
{
  "fields": {
    "project": {
      "key": "$PROJECT_KEY"
    },
    "summary": "$ticket_title",
    "description": "$ticket_description",
    "issuetype": {
      "name": "$ticket_type"
    },
    "customfield_10101": "$EPIC_KEY"
  }
}
EOF
  )

  # Send the API request to create the ticket
  response=$(curl -s -X POST \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    --data "$JSON_DATA" "$JIRA_URL/rest/api/2/issue")

  echo "$response"

  created_ticket=$(echo "$response" | grep -o "\"key\": *\"[^\"]*\"" | awk -F "\"" '{print $4}')

  echo $(green "Created Ticket: ")
  echo $(grey "  $created_ticket -----------------------------[$ticket_type]")
  echo $(grey "  $ticket_title")
  echo $(grey "  $ticket_description")

  update_config_value "FOCUSED_TICKET" "$created_ticket"

  read -rp "Assign ticket to yourself? (Y/n): " assign_to_me

  assign_to_me=$(echo "$assign_to_me" | tr '[:upper:]' '[:lower:]')

  if [ -z "$assign_to_me" ] || [ "$assign_to_me" = "y" ] || [ "$assign_to_me" = "yes" ]; then
    assign_ticket_to_me "$created_ticket"
  fi
}

open_ticket() {
  focused_ticket=$(get_focused_ticket "$1" "o")
  jira_url="$JIRA_URL/browse/$focused_ticket"
  echo $(grey "Opening: $jira_url")
  open "$jira_url"
}

# 1: Ticket Key (eg. TICKET-123)
# 2: Transition string (eg. In Progress)
transition_ticket() {
  local api_endpoint response transition_id JSON_DATA transition_ids_response
  api_endpoint="$JIRA_URL/rest/api/2/issue/$1/transitions"
  transition_ids_response=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" "${api_endpoint}")
  transition_id=$(echo "$transition_ids_response" | jq -r --arg search_name "$2" '.transitions[] | select(.name == $search_name) | .id')

  if [ -z "$transition_id" ] || [ "$transition_id" == "null" ]; then
    echo $(red "Can't find transition for ticket with name $2 for ticket: $1")
    exit 1
  fi

  JSON_DATA=$(
    cat <<EOF
{
  "transition": {
    "id": "$transition_id"
  }
}
EOF
  )

  # Send the API request to move the ticket
  curl -s -X POST \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    --data "$JSON_DATA" "$api_endpoint"

  echo $(green "Moved $1 -> In Progress")
}

move_todo() {
  local focused_ticket transition_id
  focused_ticket=$(get_focused_ticket "$1" "mt")
  transition_ticket "$focused_ticket" "To do"
}

move_in_progress() {
  local focused_ticket transition_id
  focused_ticket=$(get_focused_ticket "$1" "mt")
  transition_ticket "$focused_ticket" "In Progress"
}

move_review() {
  local focused_ticket transition_id
  focused_ticket=$(get_focused_ticket "$1" "mt")
  transition_ticket "$focused_ticket" "Review"
}

move_done() {
  local focused_ticket transition_id
  focused_ticket=$(get_focused_ticket "$1" "mt")
  transition_ticket "$focused_ticket" "Done"
}

focus_on_ticket() {
  update_config_value "FOCUSED_TICKET" "$1"
  echo $(green "Focusing on ticket: $1")
}

copy_ticket_to_clipboard() {
  get_focused_ticket | pbcopy
}

assign_ticket_to_me() {
  local focused_ticket me_api_endpoint user_id assign_ticket_endpoint

  focused_ticket=$(get_focused_ticket "$1" "a")

  me_api_endpoint="$JIRA_URL/rest/api/2/myself"
  assign_ticket_endpoint="$JIRA_URL/rest/api/2/issue/$focused_ticket/assignee"

  user_id=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" -X GET "$me_api_endpoint" | jq -r '.name')

  if [ -z "$user_id" ]; then
    echo $(red "Failed to get user ID")
    exit 1
  fi

  # Assign the ticket using curl
  curl -s -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" -X PUT -d "{\"name\": \"$user_id\"}" "$assign_ticket_endpoint"

  echo $(green "Ticket: $focused_ticket has been assigned to User: $user_id")
}

get_ticket_info() {
  local api_endpoint focused_ticket response
  focused_ticket=$(get_focused_ticket "$1" "a")
  api_endpoint="$JIRA_URL/rest/api/2/issue/$focused_ticket"

  # Make the GET request using curl
  response=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" "$api_endpoint")

  ticket_number=$(echo "$response" | jq -r '.key')
  ticket_status=$(echo "$response" | jq -r '.fields.status.name')
  ticket_url="$JIRA_URL/browse/$focused_ticket"
  assignee=$(echo "$response" | jq -r '.fields.assignee.displayName')
  title=$(echo "$response" | jq -r '.fields.summary')
  description=$(echo "$response" | jq -r '.fields.description')
  latest_comment=$(echo "$response" | jq -r '.fields.comment.comments | last | .body')

  if [ "$latest_comment" = "null" ]; then
    latest_comment="No comments available."
  fi

  cat <<-EOF

$(green "ticket info") » $ticket_number

$(grey "Status")         $(grey "|") $ticket_status
$(grey "URL")            $(grey "|") $ticket_url
$(grey "Assignee")       $(grey "|") $assignee
$(grey "Title")          $(grey "|") $title
$(grey "Description")    $(grey "|") $description
$(grey "Latest comment") $(grey "|") $latest_comment

	EOF
  exit 0
}

combo() {
  # Combo commands, eg. ja c mp o for create ticket, move to in progress and open in browser
  is_first=true
  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [ "$is_first" = false ]; then
      command="ja $arg"
      echo $(grey "|> $command")
      eval "$command"
      if [[ $? -ne 0 ]]; then
        echo $(red "C-C-C-Combo BREAKER: Above command failed.")
        exit 1
      fi
    else
      echo $(blue "C-C-C-Combo time:")
      is_first=false
    fi
    shift
  done
}

# Utility functions
# --------------------------------------------------------------------

err_missing_param() {
  cat <<-EOF

		$(red "Missing parameter: $1")
			$(green "ja") $(yellow "$2") $(red "<$1>")

	EOF
  exit 1
}

get_focused_ticket() {
  the_ticket="$FOCUSED_TICKET"
  if [[ ! -z "$1" ]]; then
    the_ticket="$1"
  fi
  if [[ -z "$the_ticket" ]]; then
    err_missing_param "jira ticket not passed" "$2"
  fi
  echo "$the_ticket"
}

get_latest_release() {
  local current_time phone_home_seconds version
  current_time=$(date +%s)
  phone_home_seconds=(PHONE_HOME_HOURS * 24 * 24)
  # Check if 24 hours have passed since the last check
  if ((current_time - LAST_PHONE_HOME >= phone_home_seconds)); then
    update_config_value "LAST_PHONE_HOME" "$current_time"
    version=$(get_version_from_remote_manifest)
    if [ -n "$version" ]; then
      if [ "$version" != "$CURRENT_VERSION" ]; then
        echo $(grey "------------------------------------------------------------------------------------------")
        echo "$(green "ja") » $(green "there is an update available for download!")"
        version
        echo "To auto update run: "
        echo $(grey "  curl -fsSL https://raw.githubusercontent.com/csi-lk/jira-aliases/master/install | bash")
        echo $(grey "------------------------------------------------------------------------------------------")
      fi
    else
      echo $(red "Couldn't find latest version information, you may need to manually update")
      echo $(grey "> https://github.com/csi-lk/jira-aliases")
    fi
  fi
}

unknown_command() {
  cat <<-EOF

		$(red "Unknown command: '$1'")

	EOF
  exit 1
}

display_help() {
  cat <<-EOF

$(green "ja") » simple jira aliases $(grey "by Callum Silcock")

$(green "ja") $(yellow "c")             $(grey "|") create ticket
$(green "ja") $(yellow "i  <?ticket>")  $(grey "|") get info about ticket
$(green "ja") $(yellow "o  <?ticket>")  $(grey "|") open ticket in browser
$(green "ja") $(yellow "mt <?ticket>")  $(grey "|") move ticket to 'todo'
$(green "ja") $(yellow "mp <?ticket>")  $(grey "|") move ticket to 'in progress'
$(green "ja") $(yellow "mr <?ticket>")  $(grey "|") move ticket to 'review'
$(green "ja") $(yellow "md <?ticket>")  $(grey "|") move ticket to 'done'
$(green "ja") $(yellow "cp")            $(grey "|") copy ticket to clipboard
$(green "ja") $(yellow "f <?ticket>")   $(grey "|") focus on ticket
$(green "ja") $(yellow "a <?ticket>")   $(grey "|") assign ticket to me
$(green "ja") $(yellow "z <?commands>") $(grey "|") combine multiple single commands together

	EOF
  exit 0
}

# Run Every Time
# --------------------------------------------------------------------

read_config
get_latest_release

# Interface
# --------------------------------------------------------------------

if test $# -eq 0; then
  display_help
else
  while test $# -ne 0; do
    case $1 in
    c | create) create ;;
    i | info)
      get_ticket_info "$2"
      exit
      ;;
    o | open)
      open_ticket "$2"
      exit
      ;;
    mt | move_todo | todo)
      move_todo "$2"
      exit
      ;;
    mp | move_in_progress | progress | prog)
      move_in_progress "$2"
      exit
      ;;
    mr | move_review | review)
      move_review "$2"
      exit
      ;;
    md | move_done | done)
      move_done "$2"
      exit
      ;;
    cp | copy | copy_ticket | copy_to_clipboard)
      copy_ticket_to_clipboard "$2"
      exit
      ;;
    f | focus | focus_ticket)
      focus_on_ticket "$2"
      exit
      ;;
    a | assign | assign_ticket | assign_to_me)
      assign_ticket_to_me "$2"
      exit
      ;;
    z | combo)
      combo "$@"
      exit
      ;;
    -v | v | -V | version) version ;;
    -h | --help | help) display_help ;;
    *)
      unknown_command "$@"
      exit 1
      ;;
    esac
    shift
  done
fi
